#Создаём виртуальное окружение venv
#python -m venv venv
#Активируем его.
#venv\scripts\activate

pip install django
После установки Django создаём пустой проект:
django-admin startproject project
cd project
(Или после создания нового проекта разместить файлы как удобно)

Проверка работы сервера
python manage.py runserver

Применяем миграции
python manage.py migrate

Создаём суперпользователя
python manage.py createsuperuser
admin
admin

подключаем ещё приложения в project\settings.py
INSTALLED_APPS
    # подключаем ещё приложения
    'django.contrib.sites',
    'django.contrib.flatpages',

Обязательно после блока INSTALLED_APPS добавить
SITE_ID = 1

MIDDLEWARE
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'

Добавим ссылку на темплайны в блоке TEMPLATES
'DIRS': [os.path.join(BASE_DIR, 'templates')],


Добавляем в project\urls.py
ссылки на наши странички (ко всем страничкам доступ будет автоматический, но чтобы они работали нужно добавить их сюда)
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('pages/', include('django.contrib.flatpages.urls')),
]

Применяем миграции
python manage.py migrate

http://127.0.0.1:8000/admin
Flat pages - статичные страницы
    URL — адрес нашей странички, # /about/
    title — название, которое будет во вкладке браузера, # Пример названия страничнки
    content — HTML-код, который будет отображаться на страничке,

Контроль просмотра страниц только зарегистрированным пользователям
Создадим файл fpages/admin.py (см в папке)
Добавим приложение 'fpages' в настройки INSTALLED_APPS

//--------------------------- Добавляем стили
достаточно в любом поиске написать запрос «bootstrap free templates»
Выбрать, скачать

settings
И в настройках добавить строчку в самом конце, для подгрузки стилей из папки static
STATICFILES_DIRS = [
    BASE_DIR / "static"
]
//-------------------------------------------------------------------------------------

D6.2
python manage.py startapp simpleapp


мы можем использовать дженерик ListView для вывода списка товаров:
simpleapp/views.py
Создаем свой класс, который наследуется от ListView.
Указываем модель, из которой будем выводить данные.
Указываем поле сортировки данных модели (необязательно).
Записываем название шаблона.
Объявляем, как хотим назвать переменную в шаблоне.

настроим адрес, чтобы любой пользователь нашего приложения мог ознакомиться с товарами
Создадим файл simpleapp/urls.py и заполним его (см.файл)

мы уже подключали flatpages и сделать так, чтобы он автоматически включал все наши адреса из приложения и добавлял к нему префикс products
project/urls.py (см. файл)
path('products/', include('simpleapp.urls')),

settings.py
INSTALLED_APPS
'simpleapp'

Создадим в папке templates шаблон products.html

simpleapp/views.py и добавим в него представление ProductDetail

project/simpleapp/urls.py добавляем ссылку ProductDetail

Добавим новый шаблон, в котором мы будем выводить отдельный товар
project/templates/product.html


Добавим категорий и продуктов, чтобы хоть чтото было

python manage.py shell
from simpleapp.models import Product, Category
Category.objects.create(name='Гигиена')
Category.objects.create(name='Уход за полостью рта')
Category.objects.create(name='Зубные щётки')

Product.objects.create(name='Зубные щётки CURAPROX 5460 Ultrasoft', description='В комплекте 3 щетки CURAPROX 5460 Ultra Soft разного цвета.', quantity=100, price=1771, category_id=1)
Product.objects.create(name='Зубная щетка Biorepair CURVE Protezione Totale Medium', description='ервая зубная щётка средней жесткости на рынке профессионального ухода за полостью рта на основе microRepair', quantity=100, price=374, category_id=1)
Product.objects.create(name='Мочалка', description='Моет и ладно.', quantity=78, price=300, category_id=1)

добавим новый шаблон, в котором мы будем выводить отдельный товар
project/templates/product.html